name: Build wasm32/webmidi example

on:
  workflow_dispatch:
  pull_request:
  # push:
  #   branches:
  #    - master
  release:
    types:
      - published

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build Emscripten/WASM example
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies
      shell: bash
      run:  |
        sudo apt update
        sudo apt install cmake libboost-dev libc++-dev
  
    - uses: mymindstorm/setup-emsdk@v14
      with:
        # Make sure to set a version number!
        version: 3.1.58  # ideally the same version as cibuildwheel is using
        # This is the name of the cache folder.
        # The cache folder will be placed in the build directory,
        #  so make sure it doesn't conflict with anything!
        actions-cache-folder: 'emsdk-cache'

    - name: Verify EMSDK
      run: emcc -v
      
    - name: Configure
      run: |
        emcmake cmake -S . -B build \
          -DLIBREMIDI_EMSCRIPTEN=1 \
          -DLIBREMIDI_FIND_BOOST=0 \
          -DLIBREMIDI_HEADER_ONLY=1 \
          -DLIBREMIDI_EXAMPLES=1 \
          -DLIBREMIDI_TESTS=0 \
          -DLIBREMIDI_CI=1 \
          -DCMAKE_CTEST_ARGUMENTS="--rerun-failed;--output-on-failure" \
          -DCMAKE_INSTALL_PREFIX=install

    - name: Build
      run: |
        cmake --build build --config Debug
        cmake --build build --config Debug --target install

    - name: List wasm targets
      run: |
        find ./build -name '*.html' -or -name '*.js' -or -name '*.wasm'

    - name: Upload targets
      uses: actions/upload-artifact@v4
      with:
        name: emscripten_libremidi
        path: |
          ./build/emscripten_*.html
          ./build/emscripten_*.js
          ./build/emscripten_*.wasm

  deploy:
    name: Deploy example to gh pages
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: emscripten_libremidi
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload gh pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './emscripten*'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
